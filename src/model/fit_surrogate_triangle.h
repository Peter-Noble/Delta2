#pragma once

#include <Eigen/Dense>

#include "../common/triangle.h"
#include "../common/cli_options.h"
#include "../testing/debug_viewer.h"

namespace Delta2 {
    namespace model {
        template<typename real>
        void ptToPtGradient(const Eigen::Vector<real, 3>& A, const Eigen::Vector<real, 3>& X, real eps, Eigen::Vector<real, 3>& Ad_out) {
            real a = A.x();
            real b = A.y();
            real c = A.z();
            real x = X.x();
            real y = X.y();
            real z = X.z();
            Ad_out.x() = ((eps - sqrt(pow(-a + x, 2) + pow(-b + y, 2) + pow(-c + z, 2)) > 0) ? (
                0
                )
                : (
                    4 * (a - x) * (-eps + sqrt(pow(-a + x, 2) + pow(-b + y, 2) + pow(-c + z, 2))) / sqrt(pow(-a + x, 2) + pow(-b + y, 2) + pow(-c + z, 2))
                    ));
            Ad_out.y() = ((eps - sqrt(pow(-a + x, 2) + pow(-b + y, 2) + pow(-c + z, 2)) > 0) ? (
                0
                )
                : (
                    4 * (b - y) * (-eps + sqrt(pow(-a + x, 2) + pow(-b + y, 2) + pow(-c + z, 2))) / sqrt(pow(-a + x, 2) + pow(-b + y, 2) + pow(-c + z, 2))
                    ));
            Ad_out.z() = ((eps - sqrt(pow(-a + x, 2) + pow(-b + y, 2) + pow(-c + z, 2)) > 0) ? (
                0
                )
                : (
                    4 * (c - z) * (-eps + sqrt(pow(-a + x, 2) + pow(-b + y, 2) + pow(-c + z, 2))) / sqrt(pow(-a + x, 2) + pow(-b + y, 2) + pow(-c + z, 2))
                    ));
        }

        template<typename real>
        void ptToEdgeGradient(common::Edge<real> E, const Eigen::Vector<real, 3> X, real eps, Eigen::Vector<real, 3>& Ad_out, Eigen::Vector<real, 3>& Bd_out) {
			const Eigen::Vector<real, 3> A = E.A;
			const Eigen::Vector<real, 3> B = E.B;
            real a = A.x();
            real b = A.y();
            real c = A.z();
            real d = B.x();
            real e = B.y();
            real f = B.z();
            real x = X.x();
            real y = X.y();
            real z = X.z();
            Ad_out.x() = ((eps - sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) > 0) ? (
                0
                )
                : (
                    (-2 * eps + 2 * sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-2 * a + 2 * d) * (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-b + e) * (2 * a - d - x) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-2 * a + 2 * d) * (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-c + f) * (2 * a - d - x) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-2 * a + 2 * d) * (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-a + d) * (2 * a - d - x) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2)) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) + 2 * (-eps + sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-2 * a + 2 * d) * (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-b + e) * (2 * a - d - x) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-2 * a + 2 * d) * (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-c + f) * (2 * a - d - x) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-2 * a + 2 * d) * (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-a + d) * (2 * a - d - x) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2)) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))
                    ));
            Ad_out.y() = ((eps - sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) > 0) ? (
                0
                )
                : (
                    (-2 * eps + 2 * sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-a + d) * (-2 * b + 2 * e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-a + d) * (2 * b - e - y) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-2 * b + 2 * e) * (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-c + f) * (2 * b - e - y) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-2 * b + 2 * e) * (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-b + e) * (2 * b - e - y) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2)) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) + 2 * (-eps + sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-a + d) * (-2 * b + 2 * e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-a + d) * (2 * b - e - y) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-2 * b + 2 * e) * (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-c + f) * (2 * b - e - y) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-2 * b + 2 * e) * (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-b + e) * (2 * b - e - y) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2)) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))
                    ));
            Ad_out.z() = ((eps - sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) > 0) ? (
                0
                )
                : (
                    (-2 * eps + 2 * sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-a + d) * (-2 * c + 2 * f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-a + d) * (2 * c - f - z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-b + e) * (-2 * c + 2 * f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-b + e) * (2 * c - f - z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-2 * c + 2 * f) * (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-c + f) * (2 * c - f - z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2)) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) + 2 * (-eps + sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-a + d) * (-2 * c + 2 * f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-a + d) * (2 * c - f - z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-b + e) * (-2 * c + 2 * f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-b + e) * (2 * c - f - z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-2 * c + 2 * f) * (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * (-c + f) * (2 * c - f - z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2)) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))
                    ));
            Bd_out.x() = ((eps - sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) > 0) ? (
                0
                )
                : (
                    (-2 * eps + 2 * sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-a + x) * (-b + e) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (2 * a - 2 * d) * (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-a + x) * (-c + f) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (2 * a - 2 * d) * (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-a + d) * (-a + x) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-a + d) * (2 * a - 2 * d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)))) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) + 2 * (-eps + sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-a + x) * (-b + e) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (2 * a - 2 * d) * (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-a + x) * (-c + f) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (2 * a - 2 * d) * (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-a + d) * (-a + x) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-a + d) * (2 * a - 2 * d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)))) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))
                    ));
            Bd_out.y() = ((eps - sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) > 0) ? (
                0
                )
                : (
                    (-2 * eps + 2 * sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-a + d) * (-b + y) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-a + d) * (2 * b - 2 * e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-b + y) * (-c + f) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (2 * b - 2 * e) * (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-b + e) * (-b + y) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-b + e) * (2 * b - 2 * e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)))) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) + 2 * (-eps + sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-a + d) * (-b + y) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-a + d) * (2 * b - 2 * e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-b + y) * (-c + f) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (2 * b - 2 * e) * (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-b + e) * (-b + y) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-b + e) * (2 * b - 2 * e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)))) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))
                    ));
            Bd_out.z() = ((eps - sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) > 0) ? (
                0
                )
                : (
                    (-2 * eps + 2 * sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-a + d) * (-c + z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-a + d) * (2 * c - 2 * f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-b + e) * (-c + z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-b + e) * (2 * c - 2 * f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-c + f) * (-c + z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-c + f) * (2 * c - 2 * f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)))) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2)) + 2 * (-eps + sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))) * ((1.0 / 2.0) * (-2 * (-a + d) * (-c + z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-a + d) * (2 * c - 2 * f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-2 * (-b + e) * (-c + z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-b + e) * (2 * c - 2 * f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2)) * (-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) + (1.0 / 2.0) * (-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2))) * (-2 * (-c + f) * (-c + z) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * (-c + f) * (2 * c - 2 * f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), 2) - 2 * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)))) / sqrt(pow(-a + x - (-a + d) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-b + y - (-b + e) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2) + pow(-c + z - (-c + f) * ((-a + d) * (-a + x) + (-b + e) * (-b + y) + (-c + f) * (-c + z)) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)), 2))
                    ));
        }

        template<typename real>
        void ptToFaceGradient(const common::Triangle<real>& T, const Eigen::Vector<real, 3>& X, real eps, Eigen::Vector<real, 3>& Ad_out, Eigen::Vector<real, 3>& Bd_out, Eigen::Vector<real, 3>& Cd_out) {
			const Eigen::Vector<real, 3>& A = T.A;
			const Eigen::Vector<real, 3>& B = T.B;
			const Eigen::Vector<real, 3>& C = T.C;
            real a = A.x();
            real b = A.y();
            real c = A.z();
            real d = B.x();
            real e = B.y();
            real f = B.z();
            real g = C.x();
            real h = C.y();
            real l = C.z();
            real x = X.x();
            real y = X.y();
            real z = X.z();
            Ad_out.x() = ((eps - (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e))) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) > 0) ? (
                0
                )
                : (
                    2 * (-eps + sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2))) * (2 * (-1.0 / 2.0 * (2 * e - 2 * h) * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) - 1.0 / 2.0 * (-2 * f + 2 * l) * (-(-a + d) * (-c + l) + (-a + g) * (-c + f))) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / pow(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2), 3.0 / 2.0) + (-2 * b * (-f + l) - 2 * c * (e - h) + 2 * y * (-f + l) + 2 * z * (e - h) - 2 * (-b + e) * (-c + l) + 2 * (-b + h) * (-c + f)) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / (sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) * (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)))))
                    ));
            Ad_out.y() = ((eps - (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e))) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) > 0) ? (
                0
                )
                : (
                    2 * (-eps + sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2))) * (2 * (-1.0 / 2.0 * (-2 * d + 2 * g) * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) - 1.0 / 2.0 * (2 * f - 2 * l) * ((-b + e) * (-c + l) - (-b + h) * (-c + f))) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / pow(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2), 3.0 / 2.0) + (-2 * a * (f - l) - 2 * c * (-d + g) + 2 * x * (f - l) + 2 * z * (-d + g) + 2 * (-a + d) * (-c + l) - 2 * (-a + g) * (-c + f)) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / (sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) * (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)))))
                    ));
            Ad_out.z() = ((eps - (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e))) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) > 0) ? (
                0
                )
                : (
                    2 * (-eps + sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2))) * (2 * (-1.0 / 2.0 * (2 * d - 2 * g) * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - 1.0 / 2.0 * (-2 * e + 2 * h) * ((-b + e) * (-c + l) - (-b + h) * (-c + f))) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / pow(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2), 3.0 / 2.0) + (-2 * a * (-e + h) - 2 * b * (d - g) + 2 * x * (-e + h) + 2 * y * (d - g) - 2 * (-a + d) * (-b + h) + 2 * (-a + g) * (-b + e)) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / (sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) * (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)))))
                    ));
            Bd_out.x() = ((eps - (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e))) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) > 0) ? (
                0
                )
                : (
                    2 * (-eps + sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2))) * (2 * (-1.0 / 2.0 * (-2 * b + 2 * h) * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) - 1.0 / 2.0 * (2 * c - 2 * l) * (-(-a + d) * (-c + l) + (-a + g) * (-c + f))) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / pow(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2), 3.0 / 2.0) + (-2 * b * (c - l) - 2 * c * (-b + h) + 2 * y * (c - l) + 2 * z * (-b + h)) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / (sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) * (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)))))
                    ));
            Bd_out.y() = ((eps - (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e))) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) > 0) ? (
                0
                )
                : (
                    2 * (-eps + sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2))) * (2 * (-1.0 / 2.0 * (2 * a - 2 * g) * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) - 1.0 / 2.0 * (-2 * c + 2 * l) * ((-b + e) * (-c + l) - (-b + h) * (-c + f))) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / pow(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2), 3.0 / 2.0) + (-2 * a * (-c + l) - 2 * c * (a - g) + 2 * x * (-c + l) + 2 * z * (a - g)) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / (sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) * (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)))))
                    ));
            Bd_out.z() = ((eps - (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e))) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) > 0) ? (
                0
                )
                : (
                    2 * (-eps + sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2))) * (2 * (-1.0 / 2.0 * (-2 * a + 2 * g) * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - 1.0 / 2.0 * (2 * b - 2 * h) * ((-b + e) * (-c + l) - (-b + h) * (-c + f))) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / pow(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2), 3.0 / 2.0) + (-2 * a * (b - h) - 2 * b * (-a + g) + 2 * x * (b - h) + 2 * y * (-a + g)) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / (sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) * (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)))))
                    ));
            Cd_out.x() = ((eps - (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e))) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) > 0) ? (
                0
                )
                : (
                    2 * (-eps + sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2))) * (2 * (-1.0 / 2.0 * (2 * b - 2 * e) * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) - 1.0 / 2.0 * (-2 * c + 2 * f) * (-(-a + d) * (-c + l) + (-a + g) * (-c + f))) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / pow(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2), 3.0 / 2.0) + (-2 * b * (-c + f) - 2 * c * (b - e) + 2 * y * (-c + f) + 2 * z * (b - e)) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / (sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) * (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)))))
                    ));
            Cd_out.y() = ((eps - (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e))) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) > 0) ? (
                0
                )
                : (
                    2 * (-eps + sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2))) * (2 * (-1.0 / 2.0 * (-2 * a + 2 * d) * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) - 1.0 / 2.0 * (2 * c - 2 * f) * ((-b + e) * (-c + l) - (-b + h) * (-c + f))) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / pow(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2), 3.0 / 2.0) + (-2 * a * (c - f) - 2 * c * (-a + d) + 2 * x * (c - f) + 2 * z * (-a + d)) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / (sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) * (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)))))
                    ));
            Cd_out.z() = ((eps - (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e))) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) > 0) ? (
                0
                )
                : (
                    2 * (-eps + sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2))) * (2 * (-1.0 / 2.0 * (2 * a - 2 * d) * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - 1.0 / 2.0 * (-2 * b + 2 * e) * ((-b + e) * (-c + l) - (-b + h) * (-c + f))) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / pow(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2), 3.0 / 2.0) + (-2 * a * (-b + e) - 2 * b * (a - d) + 2 * x * (-b + e) + 2 * y * (a - d)) * sqrt(pow(-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)), 2)) / (sqrt(pow((-a + d) * (-b + h) - (-a + g) * (-b + e), 2) + pow(-(-a + d) * (-c + l) + (-a + g) * (-c + f), 2) + pow((-b + e) * (-c + l) - (-b + h) * (-c + f), 2)) * (-a * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) - b * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) - c * ((-a + d) * (-b + h) - (-a + g) * (-b + e)) + x * ((-b + e) * (-c + l) - (-b + h) * (-c + f)) + y * (-(-a + d) * (-c + l) + (-a + g) * (-c + f)) + z * ((-a + d) * (-b + h) - (-a + g) * (-b + e)))))
                    ));
        }

        template<typename real>
        void pointGradient(const common::Triangle<real> T, const Eigen::Vector<real, 3> X, real eps, Eigen::Vector<real, 3>& Ad_out, Eigen::Vector<real, 3>& Bd_out, Eigen::Vector<real, 3>& Cd_out)
        {
            common::TriangleZone r = T.projectPointToZone(X);

            switch (r) {
            case(common::TriangleZone::V0):
                ptToPtGradient(T.A, X, eps, Ad_out);
                return;
            case(common::TriangleZone::V1):
                ptToPtGradient(T.B, X, eps, Bd_out);
                return;
            case(common::TriangleZone::V2):
                ptToPtGradient(T.C, X, eps, Cd_out);
                return;
            case(common::TriangleZone::E01):
                ptToEdgeGradient(T.AB(), X, eps, Ad_out, Bd_out);
                return;
            case(common::TriangleZone::E12):
                ptToEdgeGradient(T.BC(), X, eps, Bd_out, Cd_out);
                return;
            case(common::TriangleZone::E20):
                ptToEdgeGradient(T.CA(), X, eps, Cd_out, Ad_out);
                return;
            case(common::TriangleZone::region0):
                ptToFaceGradient(T, X, eps, Ad_out, Bd_out, Cd_out);
                return;
            }
        }

        // The gradient towards a triangle with a smaller area
        template<typename real>
        void areaGradient(const common::Triangle<real>& T, Eigen::Vector<real, 3>& Ad_out, Eigen::Vector<real, 3>& Bd_out, Eigen::Vector<real, 3>& Cd_out) {
            Eigen::Vector<real, 3> A = T.A;
            Eigen::Vector<real, 3> B = T.B;
            Eigen::Vector<real, 3> C = T.C;
            real a = A.x();
            real b = A.y();
            real c = A.z();
            real d = B.x();
            real e = B.y();
            real f = B.z();
            real g = C.x();
            real h = C.y();
            real i = C.z();
            Ad_out[0] = (0.5 * (2 * e - 2 * h) * ((a - g) * (e - h) - (b - h) * (d - g)) + 0.5 * (-2 * f + 2 * i) * (-(a - g) * (f - i) + (c - i) * (d - g))) * (pow((a - g) * (e - h) - (b - h) * (d - g), 2) + pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + pow((b - h) * (f - i) - (c - i) * (e - h), 2)) + ((2 * e - 2 * h) * ((a - g) * (e - h) - (b - h) * (d - g)) + (-2 * f + 2 * i) * (-(a - g) * (f - i) + (c - i) * (d - g))) * (0.5 * pow((a - g) * (e - h) - (b - h) * (d - g), 2) + 0.5 * pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + 0.5 * pow((b - h) * (f - i) - (c - i) * (e - h), 2));
            Ad_out[1] = (0.5 * (-2 * d + 2 * g) * ((a - g) * (e - h) - (b - h) * (d - g)) + 0.5 * (2 * f - 2 * i) * ((b - h) * (f - i) - (c - i) * (e - h))) * (pow((a - g) * (e - h) - (b - h) * (d - g), 2) + pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + pow((b - h) * (f - i) - (c - i) * (e - h), 2)) + ((-2 * d + 2 * g) * ((a - g) * (e - h) - (b - h) * (d - g)) + (2 * f - 2 * i) * ((b - h) * (f - i) - (c - i) * (e - h))) * (0.5 * pow((a - g) * (e - h) - (b - h) * (d - g), 2) + 0.5 * pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + 0.5 * pow((b - h) * (f - i) - (c - i) * (e - h), 2));
            Ad_out[2] = (0.5 * (2 * d - 2 * g) * (-(a - g) * (f - i) + (c - i) * (d - g)) + 0.5 * (-2 * e + 2 * h) * ((b - h) * (f - i) - (c - i) * (e - h))) * (pow((a - g) * (e - h) - (b - h) * (d - g), 2) + pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + pow((b - h) * (f - i) - (c - i) * (e - h), 2)) + ((2 * d - 2 * g) * (-(a - g) * (f - i) + (c - i) * (d - g)) + (-2 * e + 2 * h) * ((b - h) * (f - i) - (c - i) * (e - h))) * (0.5 * pow((a - g) * (e - h) - (b - h) * (d - g), 2) + 0.5 * pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + 0.5 * pow((b - h) * (f - i) - (c - i) * (e - h), 2));
            Bd_out[0] = (0.5 * (-2 * b + 2 * h) * ((a - g) * (e - h) - (b - h) * (d - g)) + 0.5 * (2 * c - 2 * i) * (-(a - g) * (f - i) + (c - i) * (d - g))) * (pow((a - g) * (e - h) - (b - h) * (d - g), 2) + pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + pow((b - h) * (f - i) - (c - i) * (e - h), 2)) + ((-2 * b + 2 * h) * ((a - g) * (e - h) - (b - h) * (d - g)) + (2 * c - 2 * i) * (-(a - g) * (f - i) + (c - i) * (d - g))) * (0.5 * pow((a - g) * (e - h) - (b - h) * (d - g), 2) + 0.5 * pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + 0.5 * pow((b - h) * (f - i) - (c - i) * (e - h), 2));
            Bd_out[1] = (0.5 * (2 * a - 2 * g) * ((a - g) * (e - h) - (b - h) * (d - g)) + 0.5 * (-2 * c + 2 * i) * ((b - h) * (f - i) - (c - i) * (e - h))) * (pow((a - g) * (e - h) - (b - h) * (d - g), 2) + pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + pow((b - h) * (f - i) - (c - i) * (e - h), 2)) + ((2 * a - 2 * g) * ((a - g) * (e - h) - (b - h) * (d - g)) + (-2 * c + 2 * i) * ((b - h) * (f - i) - (c - i) * (e - h))) * (0.5 * pow((a - g) * (e - h) - (b - h) * (d - g), 2) + 0.5 * pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + 0.5 * pow((b - h) * (f - i) - (c - i) * (e - h), 2));
            Bd_out[2] = (0.5 * (-2 * a + 2 * g) * (-(a - g) * (f - i) + (c - i) * (d - g)) + 0.5 * (2 * b - 2 * h) * ((b - h) * (f - i) - (c - i) * (e - h))) * (pow((a - g) * (e - h) - (b - h) * (d - g), 2) + pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + pow((b - h) * (f - i) - (c - i) * (e - h), 2)) + ((-2 * a + 2 * g) * (-(a - g) * (f - i) + (c - i) * (d - g)) + (2 * b - 2 * h) * ((b - h) * (f - i) - (c - i) * (e - h))) * (0.5 * pow((a - g) * (e - h) - (b - h) * (d - g), 2) + 0.5 * pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + 0.5 * pow((b - h) * (f - i) - (c - i) * (e - h), 2));
            Cd_out[0] = (0.5 * (2 * b - 2 * e) * ((a - g) * (e - h) - (b - h) * (d - g)) + 0.5 * (-2 * c + 2 * f) * (-(a - g) * (f - i) + (c - i) * (d - g))) * (pow((a - g) * (e - h) - (b - h) * (d - g), 2) + pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + pow((b - h) * (f - i) - (c - i) * (e - h), 2)) + ((2 * b - 2 * e) * ((a - g) * (e - h) - (b - h) * (d - g)) + (-2 * c + 2 * f) * (-(a - g) * (f - i) + (c - i) * (d - g))) * (0.5 * pow((a - g) * (e - h) - (b - h) * (d - g), 2) + 0.5 * pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + 0.5 * pow((b - h) * (f - i) - (c - i) * (e - h), 2));
            Cd_out[1] = (0.5 * (-2 * a + 2 * d) * ((a - g) * (e - h) - (b - h) * (d - g)) + 0.5 * (2 * c - 2 * f) * ((b - h) * (f - i) - (c - i) * (e - h))) * (pow((a - g) * (e - h) - (b - h) * (d - g), 2) + pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + pow((b - h) * (f - i) - (c - i) * (e - h), 2)) + ((-2 * a + 2 * d) * ((a - g) * (e - h) - (b - h) * (d - g)) + (2 * c - 2 * f) * ((b - h) * (f - i) - (c - i) * (e - h))) * (0.5 * pow((a - g) * (e - h) - (b - h) * (d - g), 2) + 0.5 * pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + 0.5 * pow((b - h) * (f - i) - (c - i) * (e - h), 2));
            Cd_out[2] = (0.5 * (2 * a - 2 * d) * (-(a - g) * (f - i) + (c - i) * (d - g)) + 0.5 * (-2 * b + 2 * e) * ((b - h) * (f - i) - (c - i) * (e - h))) * (pow((a - g) * (e - h) - (b - h) * (d - g), 2) + pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + pow((b - h) * (f - i) - (c - i) * (e - h), 2)) + ((2 * a - 2 * d) * (-(a - g) * (f - i) + (c - i) * (d - g)) + (-2 * b + 2 * e) * ((b - h) * (f - i) - (c - i) * (e - h))) * (0.5 * pow((a - g) * (e - h) - (b - h) * (d - g), 2) + 0.5 * pow(-(a - g) * (f - i) + (c - i) * (d - g), 2) + 0.5 * pow((b - h) * (f - i) - (c - i) * (e - h), 2));
        }

        // The gradient away from triangles that are degenerate (ie. a slither of a triangle or AB.dot(AC)/(|AB||AC|) -> 1.0)
        template<typename real>
        void degenGradient(const common::Triangle<real>& T, Eigen::Vector<real, 3>& Ad_out, Eigen::Vector<real, 3>& Bd_out, Eigen::Vector<real, 3>& Cd_out) {
			const Eigen::Vector<real, 3>& A = T.A;
			const Eigen::Vector<real, 3>& B = T.B;
			const Eigen::Vector<real, 3>& C = T.C;
            const int n = 4;
            real a = A.x();
            real b = A.y();
            real c = A.z();
            real d = B.x();
            real e = B.y();
            real f = B.z();
            real g = C.x();
            real h = C.y();
            real i = C.z();
            Ad_out[0] = 2 * (2 * n * (2 * a - 2 * d) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * n * (2 * a - 2 * g) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 2) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 3)) + 2 * (-2 * n * (2 * a - 2 * d) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * n * (2 * a - 2 * g) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 3) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 2));
            Ad_out[1] = 2 * (2 * n * (2 * b - 2 * e) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * n * (2 * b - 2 * h) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 2) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 3)) + 2 * (-2 * n * (2 * b - 2 * e) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * n * (2 * b - 2 * h) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 3) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 2));
            Ad_out[2] = 2 * (2 * n * (2 * c - 2 * f) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * n * (2 * c - 2 * i) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 2) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 3)) + 2 * (-2 * n * (2 * c - 2 * f) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * n * (2 * c - 2 * i) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 3) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 2));
            Bd_out[0] = 2 * (2 * n * (-2 * a + 2 * d) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * n * (2 * d - 2 * g) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 2) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 3)) + 2 * (-2 * n * (-2 * a + 2 * d) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * n * (2 * d - 2 * g) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 3) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 2));
            Bd_out[1] = 2 * (2 * n * (-2 * b + 2 * e) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * n * (2 * e - 2 * h) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 2) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 3)) + 2 * (-2 * n * (-2 * b + 2 * e) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * n * (2 * e - 2 * h) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 3) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 2));
            Bd_out[2] = 2 * (2 * n * (-2 * c + 2 * f) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) + 2 * n * (2 * f - 2 * i) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 2) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 3)) + 2 * (-2 * n * (-2 * c + 2 * f) * pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) / (pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2)) - 2 * n * (2 * f - 2 * i) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 3) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 2));
            Cd_out[0] = 2 * (2 * n * (-2 * a + 2 * g) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2)) + 2 * n * (-2 * d + 2 * g) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 2) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 3)) + 2 * (-2 * n * (-2 * a + 2 * g) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2)) - 2 * n * (-2 * d + 2 * g) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 3) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 2));
            Cd_out[1] = 2 * (2 * n * (-2 * b + 2 * h) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2)) + 2 * n * (-2 * e + 2 * h) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 2) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 3)) + 2 * (-2 * n * (-2 * b + 2 * h) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2)) - 2 * n * (-2 * e + 2 * h) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 3) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 2));
            Cd_out[2] = 2 * (2 * n * (-2 * c + 2 * i) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2)) + 2 * n * (-2 * f + 2 * i) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 2) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 3)) + 2 * (-2 * n * (-2 * c + 2 * i) * pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) / (pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2)) - 2 * n * (-2 * f + 2 * i) * pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n) / (pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2))) / (pow(pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), n) + pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), n), 3) * pow(pow(pow(d - g, 2) + pow(e - h, 2) + pow(f - i, 2), -n) + pow(pow(-a + g, 2) + pow(-b + h, 2) + pow(-c + i, 2), -n) + pow(pow(-a + d, 2) + pow(-b + e, 2) + pow(-c + f, 2), -n), 2));
        }

        // Creates a surrogate triangle by randomly selecting points from the input to for a triangle and maximising this area
        template<typename real>
        void selectSurrogateTriangle(const std::vector<Eigen::Vector<real, 3>>& pts, common::Options& opt, common::Triangle<real>& result_out, real& eps_out) {
            real best_seen = -1;
			int num_pts = pts.size();

            if (num_pts > 3) {
                int attempts = std::log2(num_pts) * 10;
                for (int i = 0; i < attempts; i++) {
                    int Ai = opt.rand(num_pts);
                    int Bi = opt.rand(num_pts);
                    int Ci = opt.rand(num_pts);
                    common::Triangle<real> trial(pts[Ai], pts[Bi], pts[Ci]);

                    if (trial.area() > best_seen && trial.area() > 0.0) {
                        result_out = trial;
                        best_seen = trial.area();
                    }
                }
                // We haven't found a valid surrogate yet so just enumerate the possible triangles and pick the first valid one
                if (result_out.area() == -1) {
                    for (int Ai = 0; Ai < num_pts; Ai++) {
                        for (int Bi = Ai + 1; Bi < num_pts; Bi++) {
                            for (int Ci = Bi + 1; Ci < num_pts; Ci++) {
                                if (Ai == Bi || Bi == Ci || Ci == Ai) {
                                    continue;
                                }
                                printf("Trialing: %i, %i, %i\n", Ai, Bi, Ci);
                                result_out = common::Triangle<real>(pts[Ai], pts[Bi], pts[Ci]);
                                best_seen = result_out.area();
                                if (best_seen > 0) {
                                    goto found;
                                }
                            }
                        }
                    }
                found:;
                }
            }
            else {
                result_out = common::Triangle(pts[0], pts[1], pts[2]);
            }

            if (result_out.area() <= 0) {
                #if !defined(NOGL)
                debug::debugViewPoints(pts);
                #endif
                throw std::runtime_error("No valid surrogate triangle was found");
            }

            eps_out = 0;
            for (const Eigen::Vector<real, 3>& pt : pts) {
                eps_out = std::max(eps_out, result_out.distToPoint(pt));
            }
        }

        // Take a candidate surrogate and adjust it's point to minimise distance to a set of points
        template<typename real>
        void optimiseTriangle(common::Triangle<real>& tri_in_out, int iterations, real delta, real area_delta, real degen_delta, std::vector<Eigen::Vector<real, 3>> pts) {
            real eps = 0.0;

            for (int f = 0; f < iterations; f++) {
                Eigen::Vector<real, 3> Ad = Eigen::Vector<real, 3>::Zero();
                Eigen::Vector<real, 3> Bd = Eigen::Vector<real, 3>::Zero();
                Eigen::Vector<real, 3> Cd = Eigen::Vector<real, 3>::Zero();
                
                for (int pt_i = 0; pt_i < pts.size(); pt_i++) {
                    Eigen::Vector<real, 3> pt = pts[pt_i];
                    Eigen::Vector<real, 3> Adpt = Eigen::Vector<real, 3>::Zero();
                    Eigen::Vector<real, 3> Bdpt = Eigen::Vector<real, 3>::Zero();
                    Eigen::Vector<real, 3> Cdpt = Eigen::Vector<real, 3>::Zero();
                    if (pt != tri_in_out.A && pt != tri_in_out.B && pt != tri_in_out.C) {
                        pointGradient(tri_in_out, pt, (1.0 - delta) * eps, Adpt, Bdpt, Cdpt);
                        // if (Adpt.hasNaN() || Bdpt.hasNaN() || Bdpt.hasNaN()) {
                        //     throw;
                        // }
                        Ad += Adpt;
                        Bd += Bdpt;
                        Cd += Cdpt;
                    }
                }
                Ad /= pts.size();
                Bd /= pts.size();
                Cd /= pts.size();

                Eigen::Vector<real, 3> Adarea = Eigen::Vector<real, 3>::Zero();
                Eigen::Vector<real, 3> Bdarea = Eigen::Vector<real, 3>::Zero();
                Eigen::Vector<real, 3> Cdarea = Eigen::Vector<real, 3>::Zero();
                areaGradient(tri_in_out, Adarea, Bdarea, Cdarea);
                // if (!(Adarea.hasNaN() || Bdarea.hasNaN() || Cdarea.hasNaN())) {
                //     throw;
                // }
                real mag = Adarea.dot(Adarea) + Bdarea.dot(Bdarea) + Cdarea.dot(Cdarea);
                mag = std::sqrt(mag);
                if (mag > 1e-12) {
                    Ad += area_delta * (Adarea / mag * pow(tri_in_out.area(), 1 / 3));
                    Bd += area_delta * (Bdarea / mag * pow(tri_in_out.area(), 1 / 3));
                    Cd += area_delta * (Cdarea / mag * pow(tri_in_out.area(), 1 / 3));
                }

                Eigen::Vector<real, 3> Addegen = Eigen::Vector<real, 3>::Zero();
                Eigen::Vector<real, 3> Bddegen = Eigen::Vector<real, 3>::Zero();
                Eigen::Vector<real, 3> Cddegen = Eigen::Vector<real, 3>::Zero();
                degenGradient(tri_in_out, Addegen, Bddegen, Cddegen);
                // if (Addegen.hasNaN() || Bddegen.hasNaN() || Cddegen.hasNaN()) {
                //     throw;
                // }
                Ad += degen_delta * Addegen;
                Bd += degen_delta * Bddegen;
                Cd += degen_delta * Cddegen;

                tri_in_out = common::Triangle(tri_in_out.A - delta * Ad, tri_in_out.B - delta * Bd, tri_in_out.C - delta * Cd);

                delta *= 0.99;

                eps = 0;

                for (const Eigen::Vector<real, 3> pt : pts) {
                    eps = std::max(eps, tri_in_out.distToPoint(pt));
                }
            }
        }
    }
}
